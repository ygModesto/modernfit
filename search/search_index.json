{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Define your interface and Modernfit implements it for you.</p> <ul> <li>At compile time</li> <li>Generate readable source code</li> <li>Compile-time errors, don't wait to run</li> <li>Use OkHttp, Volley, or one defined by you</li> <li>Use the converter you want, Jakson, Gson or one defined by you</li> </ul> SynchronousCallbackRxJava <pre><code>@Modernfit(\n  value = \"https://remotehost/api\", \n  converterFactory = JacksonConverterFactory.class)\npublic interface SynchronousProductModernfit {\n\n  @GET(\"/product/{barcode}\")\n  Product getProduct(@Path Long barcode);\n\n  @PUT(\"/product/{barcode}\")\n  Product updateProduct(@Path(\"barcode\") Long identifier, @Body String name);\n\n  @POST(\"/product/create\")\n  Product createProduct(@Body Product product);\n\n  @GET(\"/products\")\n  Collection&lt;Product&gt; listProducts();\n\n  @GET(\"/product/{barcode}\")\n  HttpInfo&lt;Product&gt; getHttpInfoAndProduct(@Path Long barcode);\n}\n</code></pre> <pre><code>@Modernfit(\n  value = \"https://remotehost/api\", \n  converterFactory = JacksonConverterFactory.class)\npublic interface AsyncProductModernfit {\n\n  @GET(\"/product/{barcode}\")\n  void getProduct(@Path Long barcode, ResponseCallback&lt;Product&gt; callback);\n\n  @PUT(\"/product/{barcode}\")\n  void updateProduct(@Path(\"barcode\") Long identifier, @Body String name, ResponseCallback&lt;Product&gt; callback);\n\n  @POST(\"/product/create\")\n  void createProduct(@Body Product product, ResponseCallback&lt;Product&gt; callback);\n\n  @GET(\"/products\")\n  void listProducts(ResponseCallback&lt;Collection&lt;Product&gt;&gt; callback);\n\n  @GET(\"/product/{barcode}\")\n  void getHttpInfoAndProduct(@Path Long barcode, HttpResponseCallback&lt;Product&gt; callback);\n}\n</code></pre> <pre><code>@Modernfit(\n  value = \"https://remotehost/api\", \n  converterFactory = JacksonConverterFactory.class)\npublic interface RxJava3ProductModernfit {\n\n  @GET(\"/product/{barcode}\")\n  Single&lt;Product&gt; getProduct(@Path Long barcode);\n\n  @PUT(\"/product/{barcode}\")\n  Observable&lt;Product&gt; updateProduct(@Path(\"barcode\") Long identifier, @Body String name);\n\n  @POST(\"/product/create\")\n  Observable&lt;Product&gt; createProduct(@Body Product product);\n\n  @GET(\"/products\")\n  Observable&lt;Collection&lt;Product&gt;&gt; listProducts();\n\n  @GET(\"/product/{barcode}\")\n  Single&lt;HttpInfo&lt;Product&gt;&gt; getHttpInfoAndProduct(@Path Long barcode);\n}\n</code></pre> <pre><code>UserModernfit userModernfit = UserModernfitImpl.builder().build();\n</code></pre>"},{"location":"#request-method","title":"Request Method","text":"<p>The methods of the interface must be annotated with <code>@GET</code>, <code>@POST</code>, <code>@PUT</code>, <code>@DELETE</code>, <code>@OPTIONS</code> or <code>@HEAD</code>. This indicates what type of HTTP request they are. With this annotation the relative url is also indicated.</p> <pre><code>    @GET(\"/users\")\n    Collection&lt;User&gt; getUsers();\n\n\n    @PUT(value = \"/updateUser/{email}\")\n    User getUsers(@Path String email, @Body UpdateUserTO updateUser);\n</code></pre>"},{"location":"#url-manipulation","title":"URL Manipulation","text":"<p>The URL can be modified with variables between <code>{ }</code>, each variable will be replaced by the value of the parameter of the same name annotated with <code>@Path</code>, you can put a different parameter name indicating which variable it replaces through the <code>@Path(\"variable\")</code></p> <pre><code>    @GET(\"/user/{id}\")\n    User getUser(@Path(\"id\") int userId);\n\n    //equivalente\n    @GET(\"/user/{id}\")\n    User getUser(@Path int id);\n</code></pre> <p>Query parameters can also be used. As with <code>@Path</code> you can use a different name than the parameter with <code>@Query(\"variable\")</code>.</p> <pre><code>    @GET(\"/{enterprise}/users\")\n    List&lt;User&gt; getUsersByEnterprise(@Path String enterprise, @Query String(\"sort\") sortValue);\n\n    //equivalente\n    @GET(\"/{enterprise}/users\")\n    List&lt;User&gt; getUsersByEnterprise(@Path String enterprise, @Query String sort);\n</code></pre> <p>Or if you prefer you can also pass the Query parameters as a Map with <code>@QueryMap</code></p> <pre><code>    @GET(\"/{enterprise}/users\")\n    List&lt;User&gt; getUsersByEnterprise(@Path String enterprise, @QueryMap Map&lt;String, String&gt; queries);\n</code></pre>"},{"location":"#headers","title":"Headers","text":"<p>Headers can be included through annotations <code>@Header</code>, <code>@Headers</code> and <code>@HeaderMap</code> or by extending the interface of <code>ConfigurationInterface</code>.</p>"},{"location":"#annotations","title":"Annotations","text":"<p><code>@Header</code>  by default it will use the name of the variable as a key, if you want to change it you can indicate in the annotation <code>@Header(\"key\")</code> <pre><code>  @Headers({\"Compilation: 987654321\", \"DeviceType: Android\"})\n  @GET(\"/device\")\n  Configuration headers();\n\n  @GET(\"/device\")\n  Configuration headers(\n      @Header Long compilation,\n      @Header String deviceType);\n\n  @Headers({\"header1: value1\", \"header2: value2\"})\n  @GET(\"/device\")\n  Configuration headersAnyway(\n      @Header String country,\n      @Header Long deviceUUID,\n      @HeaderMap Map&lt;String, String&gt; headers);\n</code></pre></p>"},{"location":"#configurationinterface","title":"ConfigurationInterface","text":"<p>If we extend the interface of ConfigurationInterfaz we can call the methods to establish and obtain the headers defined for all the methods of the interface.</p> <ul> <li><code>Map&lt;String, String&gt; getHeaders();</code></li> <li><code>void setHeaders(Map&lt;String, String&gt; headers);</code></li> </ul>"},{"location":"#url-dynamically","title":"URL Dynamically","text":"<p>You can change the base url set with <code>@Modernfit</code> using <code>@Url</code> or by making the interface extend from <code>ConfigurationInterface</code>.</p>"},{"location":"#url","title":"@URL","text":"<p>The url passed by parameter will cause the base url to be ignored  <code>\"https://remotehost/api\"</code>.</p> <pre><code>@Modernfit(value = \"https://remotehost/api\", converterFactory = JacksonConverterFactory.class)\npublic interface UrlEchoResponseRepository {\n\n  @GET(\"/echo\")\n  EchoResponse urlAsParameter(@Url String url);\n}\n</code></pre>"},{"location":"#configurationinterface_1","title":"ConfigurationInterface","text":"<p>By extending ConfigurationInterface we can call the method <code>void setBaseUrl(String baseUrl);</code> to change the base url.</p> <pre><code>@Modernfit(value = \"http://remotehost/api\", converterFactory = JacksonConverterFactory.class)\npublic interface UrlEchoResponseRepository extends ConfigurationInterface {\n\n  @GET(\"/echo\")\n  EchoResponse urlInInterfaceImpl();\n}\n</code></pre>"},{"location":"#httpinfo","title":"HttpInfo","text":"<p>You can get information from the HTTP response with the HttpInfo or HttpResponseCallback object in case of using callbacks. Lets get the <code>code</code>, <code>headers</code> and <code>body</code>.</p> SynchronousCallbackRxJava <pre><code>@Modernfit(\n  value = \"https://remotehost/api\", \n  converterFactory = JacksonConverterFactory.class)\npublic interface SynchronousProductModernfit {\n\n  @GET(\"/product/{barcode}\")\n  HttpInfo&lt;Product&gt; getHttpInfoAndProduct(@Path Long barcode);\n}\n</code></pre> <pre><code>@Modernfit(\n  value = \"https://remotehost/api\", \n  converterFactory = JacksonConverterFactory.class)\npublic interface AsyncProductModernfit {\n\n  @GET(\"/product/{barcode}\")\n  void getHttpInfoAndProduct(@Path Long barcode, HttpResponseCallback&lt;Product&gt; callback);\n}\n</code></pre> <pre><code>@Modernfit(\n  value = \"https://remotehost/api\", \n  converterFactory = JacksonConverterFactory.class)\npublic interface RxJava3ProductModernfit {\n\n  @GET(\"/product/{barcode}\")\n  Observable&lt;HttpInfo&lt;Product&gt;&gt; getHttpInfoAndProduct(@Path Long barcode);\n}\n</code></pre>"},{"location":"#formurlencoded","title":"FormUrlEncoded","text":"<p>If the annotation is used, the <code>@FormUrlEncoded</code> HTTP request will be of type <code>\"application/x-www-form-urlencoded\"</code>. Each key value is defined by the annotation <code>@Field</code>, the key is given by the name of the variable or through the annotation field <code>@Field(\"key\")</code>, the object provides the value.</p> <p>Fields can also be provided with an annotated Map with <code>@FieldMap</code></p> <pre><code>@FormUrlEncoded\n@POST(\"/user/create\")\nUser createUser(@Field String name, @Field String login);\n\n@FormUrlEncoded\n@POST(\"/user/create\")\nUser createUser(@FieldMap Map&lt;String, String&gt; user);\n</code></pre>"},{"location":"#multipart","title":"Multipart","text":"<p>If the annotation is used, the <code>@Multipart</code> HTTP request will be of type Multipart. Each part is declared using annotation <code>@Part</code>.</p> <p>You can also include multiple parts at once using a Map and annotation  <code>@PartMap</code></p> <pre><code>@Multipart\n@POST(\"/user/create\")\nUser createUser(@Part User user, @Part String entry);\n\n@Multipart\n@POST(\"/users/createHeavy\")\nCollection&lt;User&gt; createUsers(@PartMap Map&lt;String, User&gt; users);\n</code></pre>"},{"location":"#http-client","title":"HTTP Client","text":"<p>You can use the clients already defined by Modernfit or if you prefer define a custom client http . The client to use is defined in the client field of the annotation <code>@Modernfit</code>.</p> <ul> <li>ClientOkHttp.class to use OkHttp</li> <li>ClientVolley.class to use Volley (Only for Android).</li> </ul>"},{"location":"#clientokhttpclass","title":"ClientOkHttp.class","text":"<p>For HTTP requests it uses the OkHttp library. This library needs the OkHttpClient object that if you don't provide one to Modernfit it will generate one when building the interface implementation.</p> <p>If you want to contribute an OkHttpClient object, it must be done when calling the constructor of the interface implementation. If we assume that the interface is called PongRepository.</p> <pre><code>OkHttpClient okHttpClient = new OkHttpClient();\nPongRepositoryImpl.builder()\n                .addHttpClient(ClientOkHttp.create(okHttpClient))\n                .build();\n</code></pre>"},{"location":"#clientvolleyclass","title":"ClientVolley.class","text":"<p>For HTTP requests it uses the Volley library. This library needs the RequestQueue object that if you don't provide one to Modernfit it will generate one when building the interface implementation.</p> <p>Note</p> <p>To use Volley if the RequestQueue object is not passed, the Context must be passed through the following call:</p> <p><code>AndroidModernfitContext.setContext(context);</code></p> <p>If you want to provide a RequestQueue object, it must be done when calling the interface implementation constructor. If we assume that the interface is called PongRepository.</p> <pre><code>RequestQueue requestQueue = Volley.newRequestQueue(this);\nPongRepositoryImpl.builder()\n                .addHttpClient(ClientVolley.create(requestQueue))\n                .build();\n</code></pre> <p>To use volley it is necessary to add the dependency with the Modernfit Volley module.</p> <pre><code>implementation 'com.ygmodesto.modernfit:volley:1.0.0'\n</code></pre>"},{"location":"#define-custom-http-client","title":"Define Custom HTTP Client","text":"<p>To define an HTTP Client to use with Modernfit we must create a class that meets 2 requirements:</p> <ul> <li>It must have a static method <code>public static ClientCustom create();</code></li> <li>You must implement the <code>HttpClient</code> interface</li> </ul> <p>Once we have our ClientCustom we can use it in the annotation <code>@Modernfit</code>. <pre><code>@Modernfit(client = ClientCustom.class)\npublic interface PongRepository {\n}\n</code></pre></p> <p>Here is the skeleton of an example: <pre><code>public class ClientCustom implements HttpClient {\n\n\n  public static ClientCustom create() {\n    //Creation of everything you need\n  }\n\n\n  @Override\n  public ResponseContent callMethod(RequestInfo requestInfo, DiscreteBody body)\n      throws ModernfitException {\n\n    //code for http request \n  }\n\n  @Override\n  public &lt;T&gt; void callMethod(RequestInfo requestInfo, DiscreteBody body,\n      ResponseCallback&lt;T&gt; callback) throws ModernfitException {\n\n    //code for http request using callback\n  }\n\n  @Override\n  public ResponseContent callMethod(RequestInfo requestInfo, MultipartBody body)\n      throws ModernfitException {\n\n\n    //code for http multipart request \n  }\n\n  @Override\n  public &lt;T&gt; void callMethod(RequestInfo requestInfo, MultipartBody body,\n      ResponseCallback&lt;T&gt; callback) throws ModernfitException {\n\n    //code for http multipart request using callback\n  }\n}\n</code></pre></p>"},{"location":"#define-custom-converter","title":"Define Custom Converter","text":"<p>To define a Converter to use with Modernfit we must create a class that meets 2 requirements:</p> <ul> <li>It must have a static method <code>public static CustomConverterFactory create();</code></li> <li>You must implement the <code>Converter.Factory</code> interface</li> </ul> <p>Converter.Factory forces to implement 3 methods. These methods should return a Converter.</p> <ul> <li><code>public &lt;T&gt; Converter&lt;T, BodyContent&gt; getRequestConverter(T zombie, CustomType&lt;T&gt; customType);</code> This Coverter will be used to convert the Object annotated with <code>@Body</code> of type T.</li> <li><code>public &lt;T&gt; Converter&lt;ResponseContent, T&gt; getResponseConverter(T zombie, CustomType&lt;T&gt; customType);</code> This Converter will be used to convert the response of the HTTP request to the object to be returned.</li> <li><code>public &lt;T&gt; Converter&lt;T, String&gt; getUrlConverter(T zombie, CustomType&lt;T&gt; customType);</code> This Converter will be used to convert the parameters noted with <code>@Path</code>, <code>@Query</code> and <code>@QueryMap</code> to convert them to URL.</li> </ul> <p>Here is the skeleton of an example: <pre><code>public class CustomConverterFactory extends BaseConverterFactory implements Converter.Factory {\n\n  public static CustomConverterFactory create(){\n    //Creation of everything you need\n  }\n\n  @Override\n  public &lt;T&gt; Converter&lt;T, BodyContent&gt; getRequestConverter(T zombie, CustomType&lt;T&gt; customType) {\n    //code to create the converter\n  }\n\n  @Override\n  public &lt;T&gt; Converter&lt;ResponseContent, T&gt; getResponseConverter(T zombie,\n      CustomType&lt;T&gt; customType) {\n    //code to create the converter\n  }\n\n  @Override\n  public &lt;T&gt; Converter&lt;T, String&gt; getUrlConverter(T zombie, CustomType&lt;T&gt; customType) {\n    //code to create the converter\n  }\n\n}\n</code></pre></p> <p>The <code>CustomType&lt;T&gt; customType</code> parameter contains all the necessary information that the main Converters libraries need. The parameter <code>T zombie</code> has been added to be able to do Method Overloading, this parameter will only receive an object of that type set to null. Thanks to Method Overloading we can generate specific converters for certain types of data, for example, the BaseConverterFactory class from which the previous example extends is responsible for generating all Converters for cases in which the response or request are scalars (integers, floats, a raw string instead of the JSON expected by Jackson or Gson for example).</p>"},{"location":"#usage","title":"Usage","text":"gradlemaven <pre><code>implementation 'com.ygmodesto.modernfit:modernfit:1.0.0'\n//if you use volley as client\n//implementation 'com.ygmodesto.modernfit:volley:1.0.0'\nannotationProcessor 'com.ygmodesto.modernfit:modernfit-compiler:1.0.0'\n</code></pre> <p>Remember to add the dependencies of the client and the converter that you are going to use, if for example you are going to use OkHttp and Gson you need to add the dependencies of the library.</p> <pre><code>implementation 'com.squareup.okhttp3:okhttp:VERSION'\nannotationProcessor 'com.google.code.gson:gson:VERSION'\n</code></pre> <p><pre><code>  &lt;properties&gt;\n    &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;!-- depending on your project --&gt;\n    &lt;modernfit.version&gt;1.0.0&lt;/modernfit.version&gt;\n  &lt;/properties&gt;\n    ...\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.ygmodesto.modernfit&lt;/groupId&gt;\n    &lt;artifactId&gt;modernfit&lt;/artifactId&gt;\n    &lt;version&gt;${modernfit.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n  ...\n  &lt;build&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.8.1&lt;/version&gt; &lt;!-- depending on your project --&gt;\n        &lt;configuration&gt;\n          &lt;source&gt;${java.version}&lt;/source&gt;\n          &lt;target&gt;${java.version}&lt;/target&gt;\n          &lt;annotationProcessorPaths&gt;\n            &lt;path&gt;\n              &lt;groupId&gt;com.ygmodesto.modernfit&lt;/groupId&gt;\n              &lt;artifactId&gt;modernfit-processor&lt;/artifactId&gt;\n              &lt;version&gt;${modernfit.version}&lt;/version&gt;\n            &lt;/path&gt;\n          &lt;/annotationProcessorPaths&gt;\n        &lt;/configuration&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/build&gt;\n</code></pre> Remember to add the dependencies of the client and the converter that you are going to use, if for example you are going to use OkHttp and Gson you need to add the dependencies of the library.</p> <pre><code>  &lt;dependency&gt;\n    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;\n    &lt;version&gt;${okhttp.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;dependency&gt;\n    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n    &lt;artifactId&gt;gson&lt;/artifactId&gt;\n    &lt;version&gt;${gson.version}&lt;/version&gt;\n  &lt;/dependency&gt;\n</code></pre>"},{"location":"ide-support/","title":"IDE Support","text":""},{"location":"ide-support/#android-studio","title":"Android Studio","text":"<p>No need to do anything </p>"},{"location":"ide-support/#eclipse","title":"Eclipse","text":"<p>I recommend that you install m2e-apt as it applies annotation processing automatically.</p> <p>To tell the plugin to run, the easiest way is to add the following property to your project's pom.xml</p> <pre><code>    &lt;properties&gt;\n      &lt;m2e.apt.activation&gt;jdt_apt&lt;/m2e.apt.activation&gt;\n    &lt;/properties&gt;\n</code></pre>"},{"location":"ide-support/#intellij","title":"IntelliJ","text":"<p>For maven and gradle you already get the configuration automatically.</p>"},{"location":"ide-support/#netbeans","title":"Netbeans","text":"<p>If you use maven there is nothing else to do.</p>"},{"location":"migrating/","title":"Migrating from Retrofit","text":"<p>Modernfit uses the same annotation syntax as Retrofit to facilitate migration.</p> <p>What will we gain from Retrofit?</p> <ul> <li>Code generation at compile time instead of at run time.</li> <li>Detection of errors before executing.</li> <li>Independence of the HTTP Client, you can choose one or use the one you want.</li> <li>No code obfuscation by encapsulating the returned objects in a <code>Call</code> object</li> </ul> <p>Below are two migration examples, one from Retrofit + RxJava to Modernfit with RxJava and another going from Retrofit. </p> <p>Note</p> <p>In Android Studio we must give the first time we have our interface to <code>Build -&gt; Make Project</code>  to generate the implementation so that the editor recognizes the <code>UserRepositoryImpl</code> class  referenced in the examples.</p>"},{"location":"migrating/#from-callenqueue","title":"From Call.enqueue","text":""},{"location":"migrating/#retrofit","title":"Retrofit","text":"UserRepositoryMainActivitygradle <pre><code>import retrofit2.Call;\nimport retrofit2.http.Body;\nimport retrofit2.http.GET;\nimport retrofit2.http.POST;\nimport retrofit2.http.Path;\n\npublic interface UserRepository {\n\n    @GET(\"user/{id}\")\n    Call&lt;User&gt; getUser(@Path(\"id\") Long id);\n\n\n    @POST(\"user/{id}/update\")\n    Call&lt;User&gt; updateUser(@Path(\"id\") Long id, @Body UpdateUserTO updateUserTO);\n}\n</code></pre> <pre><code>Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(\"https://remotehost.com/api/\")\n            .addConverterFactory(GsonConverterFactory.create())\n            .build();\n\nUserRepository userRepository = retrofit.create(UserRepository.class);\n\nuserRepository.updateUser(23L, updateUserTO)\n    .enqueue(new Callback&lt;User&gt;() {\n\n        @Override\n        public void onResponse(Call&lt;User&gt; call, Response&lt;User&gt; response) {\n            //code\n        }\n\n        @Override\n        public void onFailure(Call&lt;User&gt; call, Throwable t) {\n            //code\n        }\n    });\n</code></pre> <pre><code>implementation 'com.squareup.retrofit2:retrofit:2.9.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n</code></pre>"},{"location":"migrating/#modernfit","title":"Modernfit","text":"UserRepositoryMainActivitygradle <pre><code>import com.ygmodesto.modernfit.annotations.Body;\nimport com.ygmodesto.modernfit.annotations.GET;\nimport com.ygmodesto.modernfit.annotations.Modernfit;\nimport com.ygmodesto.modernfit.annotations.POST;\nimport com.ygmodesto.modernfit.converters.GsonConverterFactory;\n\n@Modernfit(value = \"https://remotehost.com/api/\", converterFactory = GsonConverterFactory.class)\npublic interface UserRepository {\n\n    @GET(\"user/{id}\")\n    void getUser(@Path Long id, ResponseCallback&lt;User&gt; responseCallback);\n\n\n    @POST(\"user/{id}/update\")\n    void updateUser(@Path Long id, @Body UpdateUserTO updateUserTO, ResponseCallback&lt;User&gt; responseCallback);\n}\n</code></pre> <pre><code>UserRepository userRepository = UserRepositoryImpl.builder().build();\n\nuserRepository.updateUser(23L, updateUserTO, new ResponseCallback&lt;User&gt;(){\n    public void onSuccess(User user) {\n        //code\n    }\n\n    public void onFailure(ModernfitException e) {\n        //code\n    }\n});\n</code></pre> <pre><code>implementation 'com.ygmodesto.modernfit:modernfit:1.0.0'\nannotationProcessor 'com.ygmodesto.modernfit:modernfit-processor:1.0.0'\n</code></pre>"},{"location":"migrating/#from-rxjava3","title":"From RxJava3","text":""},{"location":"migrating/#retrofit_1","title":"Retrofit","text":"UserRepositoryMainActivitygradle <pre><code>import io.reactivex.rxjava3.core.Observable;\nimport retrofit2.Call;\nimport retrofit2.http.Body;\nimport retrofit2.http.GET;\nimport retrofit2.http.POST;\nimport retrofit2.http.Path;\n\npublic interface UserRepository {\n\n    @GET(\"user/{id}\")\n    Observable&lt;User&gt; getUser(@Path(\"id\") Long id);\n\n\n    @POST(\"user/{id}/update\")\n    Observable&lt;User&gt; updateUser(@Path(\"id\") Long id, @Body UpdateUserTO updateUserTO);\n}\n</code></pre> <pre><code>Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(\"https://remotehost.com/api/\")\n            .addConverterFactory(GsonConverterFactory.create())\n            .build();\n\nUserRepository userRepository = retrofit.create(UserRepository.class);\n\nuserRepository.updateUser(23L, updateUserTO)\n    .subscribeOn(Schedulers.io())\n    .subscribe(e -&gt; //code\n                );\n</code></pre> <pre><code>implementation 'com.squareup.retrofit2:retrofit:2.9.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.9.0'\nimplementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'\nimplementation \"io.reactivex.rxjava3:rxjava:3.1.2\"\n</code></pre>"},{"location":"migrating/#modernfit_1","title":"Modernfit","text":"UserRepositoryMainActivitygradle <pre><code>import io.reactivex.rxjava3.core.Observable;\nimport com.ygmodesto.modernfit.annotations.Body;\nimport com.ygmodesto.modernfit.annotations.GET;\nimport com.ygmodesto.modernfit.annotations.Modernfit;\nimport com.ygmodesto.modernfit.annotations.POST;\nimport com.ygmodesto.modernfit.converters.GsonConverterFactory;\n\n@Modernfit(value = \"https://remotehost.com/api/\", converterFactory = GsonConverterFactory.class)\npublic interface UserRepository {\n\n    @GET(\"user/{id}\")\n    Observable&lt;User&gt; getUser(@Path Long id);\n\n\n    @POST(\"user/{id}/update\")\n    Observable&lt;User&gt; updateUser(@Path Long id, @Body UpdateUserTO updateUserTO);\n}\n</code></pre> <pre><code>UserRepository userRepository = UserRepositoryImpl.builder().build();\n\nuserRepository.getPongResponse()\n            .subscribeOn(Schedulers.io())\n            .subscribe(e -&gt; Log.d(\"Migration\", e.toString()));\n\nuserRepository.updateUser(23L, updateUserTO)\n    .subscribeOn(Schedulers.io())\n    .subscribe(e -&gt; //code\n                );\n</code></pre> <pre><code>implementation 'com.ygmodesto.modernfit:modernfit:1.0.0'\nimplementation \"io.reactivex.rxjava3:rxjava:3.1.2\"\nannotationProcessor 'com.ygmodesto.modernfit:modernfit-processor:1.0.0'\n</code></pre>"},{"location":"migrating/#from-callexecute","title":"From Call.execute","text":"<p>In this example it is assumed that both in Retrofit and Modernfit the developer manages on his own that the request is thrown in another Thread since Android will throw the exception <code>android.os.NetworkOnMainThreadException</code></p>"},{"location":"migrating/#retrofit_2","title":"Retrofit","text":"UserRepositoryMainActivitygradle <pre><code>import retrofit2.Call;\nimport retrofit2.http.Body;\nimport retrofit2.http.GET;\nimport retrofit2.http.POST;\nimport retrofit2.http.Path;\n\npublic interface UserRepository {\n\n    @GET(\"user/{id}\")\n    Call&lt;User&gt; getUser(@Path(\"id\") Long id);\n\n\n    @POST(\"user/{id}/update\")\n    Call&lt;User&gt; updateUser(@Path(\"id\") Long id, @Body UpdateUserTO updateUserTO);\n}\n</code></pre> <pre><code>Retrofit retrofit = new Retrofit.Builder()\n            .baseUrl(\"https://remotehost.com/api/\")\n            .addConverterFactory(GsonConverterFactory.create())\n            .build();\n\nUserRepository userRepository = retrofit.create(UserRepository.class);\n\nUser user = userRepository.updateUser(23L, updateUserTO).execute().body();\n</code></pre> <pre><code>implementation 'com.squareup.retrofit2:retrofit:2.9.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n</code></pre>"},{"location":"migrating/#modernfit_2","title":"Modernfit","text":"UserRepositoryMainActivitygradle <pre><code>import com.ygmodesto.modernfit.annotations.Body;\nimport com.ygmodesto.modernfit.annotations.GET;\nimport com.ygmodesto.modernfit.annotations.Modernfit;\nimport com.ygmodesto.modernfit.annotations.POST;\nimport com.ygmodesto.modernfit.converters.GsonConverterFactory;\n\n@Modernfit(value = \"https://remotehost.com/api/\", converterFactory = GsonConverterFactory.class)\npublic interface UserRepository {\n\n    @GET(\"user/{id}\")\n    User getUser(@Path Long id);\n\n\n    @POST(\"user/{id}/update\")\n    User updateUser(@Path Long id, @Body UpdateUserTO updateUserTO);\n}\n</code></pre> <pre><code>UserRepository userRepository = UserRepositoryImpl.builder().build();\n\nUser user = userRepository.updateUser(23L, updateUserTO);\n</code></pre> <pre><code>implementation 'com.ygmodesto.modernfit:modernfit:1.0.0'\nannotationProcessor 'com.ygmodesto.modernfit:modernfit-processor:1.0.0'\n</code></pre>"}]}